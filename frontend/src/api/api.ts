/* tslint:disable */
/* eslint-disable */
/**
 * Î´ by KevinZonda
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DownloadRequest
 */
export interface DownloadRequest {
    /**
     * 
     * @type {string}
     * @memberof DownloadRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface FileInfoRequest
 */
export interface FileInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof FileInfoRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfoRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface FileInfoResponse
 */
export interface FileInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof FileInfoResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof FileInfoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfoResponse
     */
    'expired_at'?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfoResponse
     */
    'uploaded_at'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfoResponse
     */
    'password'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfoResponse
     */
    'paste_bin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileInfoResponse
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface FileUploadResponse
 */
export interface FileUploadResponse {
    /**
     * 
     * @type {string}
     * @memberof FileUploadResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PasteBinUploadRequest
 */
export interface PasteBinUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof PasteBinUploadRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasteBinUploadRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasteBinUploadRequest
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof PasteBinUploadRequest
     */
    'expired_at'?: number;
}
/**
 * 
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     * 
     * @type {string}
     * @memberof UploadResponse
     */
    'id'?: string;
}

/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadRequest} downloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (downloadRequest: DownloadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadRequest' is not null or undefined
            assertParamExists('downloadFile', 'downloadRequest', downloadRequest)
            const localVarPath = `/file/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FileInfoRequest} fileInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo: async (fileInfoRequest: FileInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileInfoRequest' is not null or undefined
            assertParamExists('getFileInfo', 'fileInfoRequest', fileInfoRequest)
            const localVarPath = `/file/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasteBinUploadRequest} pasteBinUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPastebin: async (pasteBinUploadRequest: PasteBinUploadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pasteBinUploadRequest' is not null or undefined
            assertParamExists('uploadPastebin', 'pasteBinUploadRequest', pasteBinUploadRequest)
            const localVarPath = `/file/upload/pastebin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pasteBinUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadRequest} downloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(downloadRequest: DownloadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(downloadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FileInfoRequest} fileInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileInfo(fileInfoRequest: FileInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileInfo(fileInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PasteBinUploadRequest} pasteBinUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPastebin(pasteBinUploadRequest: PasteBinUploadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPastebin(pasteBinUploadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @param {DownloadRequest} downloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(downloadRequest: DownloadRequest, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFile(downloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FileInfoRequest} fileInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo(fileInfoRequest: FileInfoRequest, options?: any): AxiosPromise<FileInfoResponse> {
            return localVarFp.getFileInfo(fileInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PasteBinUploadRequest} pasteBinUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPastebin(pasteBinUploadRequest: PasteBinUploadRequest, options?: any): AxiosPromise<UploadResponse> {
            return localVarFp.uploadPastebin(pasteBinUploadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @param {DownloadRequest} downloadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadFile(downloadRequest: DownloadRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).downloadFile(downloadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FileInfoRequest} fileInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public getFileInfo(fileInfoRequest: FileInfoRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).getFileInfo(fileInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PasteBinUploadRequest} pasteBinUploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public uploadPastebin(pasteBinUploadRequest: PasteBinUploadRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).uploadPastebin(pasteBinUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


